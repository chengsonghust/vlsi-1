ECE 474 Homework 4 - Spring 2014
New and improved GCD...now with Gates!  

We will now synthesize gcd with synthesis constraints and rerun the 
testbench. You'll be getting a lot of output from the synthesis tool 
and simulations to keep track of.  This will all be done of course
with a bash shell script.
  
The gcd RTL design from the last assignment will be reused unchanged.  
No HDL coding will be required in this assignment.  ;^(

You already have a hopefully correct RTL implementation of the gcd design.
Don't begin synthesis till you fix your RTL bugs. Debugging at the gate
level is pretty much a lost cause.

You will be given:
  -the verilog testbench from before to check the outputs 
  -skeleton synthesis script tcl code 
  -skeleton bash shell code

You will fillout the bash shell skeleton called "doit" to run everything.
It should....
  -run a C model of gcd that produces your golden_data file
  -make necessary directories to keep your files in order
  -compile your rtl image
  -compile the cell library if needed
  -run the rtl simulation and check against golden_data file created by the
   C language model. 
  -synthesize gcd using your synthesis script "dc_syn"
  -compile the gate-level image of gcd 
  -run the gate level simulation and regress against the golden_data file
  -using some unix tool within your script, parse the area.txt file to look for the 
   accidental inclusion of latches.  Have your doit script report any found.

In the process, you will create several reports.  All the reports generated
will be in a directory called "reports".  This directory will contain:
  reports/
    -area             --number of gates and cells used
    -delay            --setup time slack report (two worst paths)
    -hold             --hold time slack report (two worst paths)
    -rtl_miscompares  --rtl simulation differences from diff
    -gate_miscompares --gate "no delay" simulation differences (output from diff) 
    -sdf_miscompares  --gate "with sdf" simulation differences 

You will also create a synthesis log file. Put it in a directory called "logs".
  logs/
    -synth_log            --synthesis transcript from DC 

The gcd netlist will be placed in vlogout:
  vlogout/
    -gcd.gate.v           --gcd, in gate-level structural verilog 

Put your Verilog source code in a directory called "rtl_src".
Put the testbench in a directory called "tb_src". 

Name your synthesis script, "dc_syn". But it in a directory called "bin".  
We may be placing other scripts inside there.  The "doit" top level script 
stays at the top level.

Work to do:
1) Complete the skeleton synthesis script, adding information where the
   lines begin with "##" 
2) Write the doit script to automate all the steps required.
3) Make the gate level design work.  Make sure the output data compares 
   without error.
4) Once the gate level design works, add timing with the inclusion of the
   gcd.gate.sdf file.   
5) Make sure you have no setup or hold time errors by examining the output
   from dc_shell.

Hints
What to turn in:
A single tarred and gzipped directory of your hw5 (that includes everything) plus:
  A README file with 
     -Total gate count and area
     -Worst case setup time in design and its associated path 
     -Worst case hold time in the design and its associated path
     -Number of latches found if any and how you got rid of them if any

echo " "
echo "***** Simulating gate-level gcd *****"
echo " "
vsim tb -do dofile  +nowarnTFMPC -quiet -c -t 1ps
mv vectors/output_data vectors/output_data.gate

echo " "
echo "***** Simulating gate-level gcd with sdf *****"
echo " "
vsim tb -do dofile +nowarnTFMPC -quiet -c -sdfmax /tb/gcd_0=sdfout/gcd.gate.sdf -t 1ps  +nowarn3448


Grading
  -working gate level gcd          45%
  -TCL DC synthesis script         25%
  -doit script                     20%
  -readme file                     10%
  
ERATTA:
1. There is a bug in the .sdf file produced by synopsys or (most likely) in the 
   library file.  There are two hold time parameters related to reset that are 
   not found.  So, you must use sed to remove these lines in your doit script
   before you use the sdf file.  Here is the fix:
 
   #fix missing timing parameter in sdf file
   sed '/(HOLD (posedge RSTB)/d' < sdfout/gcd.gate.sdf  > sdfout/$$tempfile
   sed '/(HOLD (posedge SETB)/d' < sdfout/$$tempfile > sdfout/gcd.gate.sdf
   rm sdfout/$$tempfile
 
2. Run the simulator with picosecond resolution in all cases. The gate level
   simulation needs ps resolution. Both vism invocations must include "-t 1ps".
