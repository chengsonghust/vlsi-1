module tas(
       input  clk_50,               // 50Mhz input clock
       input  clk_2,                // 2Mhz input clock
       input  reset_n,              // reset async active low
       input  serial_data,          // serial input data
       input  data_ena,             // serial data enable
       output ram_wr_n,             // write strobe to ram
       output [7:0] ram_data,       // ram data
       output reg [10:0] ram_addr   // ram address
       );

wire fifo_empty;
wire fifo_full;
wire ram_ena;
wire ram_wr;
wire rd_fifo;
wire wr_fifo;
wire zero_sel;

wire [7:0] count_out;
wire [7:0] fifo_data_out;
wire [7:0] parallel_data;

wire a5_or_c3 = (parallel_data == 'hA5) || (parallel_data == 'hC3);

/// sub modules
fifo f0(clk_50,
	clk_2,
	reset_n,
	wr_fifo,
	rd_fifo,
	parallel_data,
	fifo_data_out,
	fifo_empty,
	fifo_full
	); 	

ctrl_blk_50 cb50(clk_50,
	         reset_n,
	         data_ena,
	         a5_or_c3,
	         wr_fifo
		);

ctrl_blk_2 cb2(clk_2,
	.reset_n,
	.fifo_empty,
	.rd_fifo,
	.zero_sel,
	.ram_ena,
	.ram_wr_n
);

shift_reg shift_reg_0(
	.clk_50, 
	.reset_n, 
	.data_ena, 
	.serial_data, 
	.parallel_data
);


counter ram_addresser(
  	.clk_2,   
  	.reset_n,  
  	.data_ena (ram_ena),
  	.ram_addr
); 
 

averager avg_0(
	.clk_2,
	.reset_n,
	.zero_sel,
	.rd_fifo,
	.data_in (fifo_data_out[7:0]),
	.ram_data
);  

endmodule
